#!/usr/bin/env python3

import time
import struct
import socket
import threading
import subprocess

packet_struct = struct.Struct("<QQQ")
packet_size = packet_struct.size
socks = []
packets = []

def make_packet(timestamp, value, sensor_id):
    return packet_struct.pack(timestamp, value, sensor_id)

our_sensor_ids = {
    "core_clock": 1000,
    "core_temp": 1001,
    "throttled": 1100,
    "mem_usage": 1002,
    "core_usages": 1200,
}

def vcgencmd(args: str) -> str:
    out = subprocess.check_output(["/usr/bin/vcgencmd", *args.split()],
                                  stderr=subprocess.STDOUT)
    return out.decode().strip()

def get_temp_c() -> int:
    actual_temp = float(vcgencmd("measure_temp").strip("temp=").strip("\'C"))
    m = struct.unpack("Q", struct.pack("d", actual_temp))[0]
    return m

def sleep_util(t):
    diff = t - time.time()
    if diff > 0:
        time.sleep(diff)

def misc_data_writer():
    global packets
    rate = 10  # Hz
    dt = 1 / rate
    while True:
        start = time.time() # seconds (float)
        temp = get_temp_c()
        packets.append(make_packet(int(start * 1e6), temp, 123))
        sleep_util(start + dt)

def telem_file_reader():
    global socks, packets
    f = open("/var/lib/pspl_fsw/latest.bin", "rb")
    f.seek(0)
    backlog = b""

    while True:
        data = f.read(1024)
        if data:
            backlog += data

        while len(backlog) >= packet_size:
            packet = backlog[:packet_size]
            backlog = backlog[packet_size:]
            packets.append(packet)

        while len(packets) > 0:
            packet = packets.pop(0)
            sock: socket.socket = None
            for sock, addr in socks:
                try:
                    sock.sendall(packet)
                except Exception:
                    print(f"address {addr} disconnected")
                    sock.close()
                    socks.remove((sock, addr))

def main():
    file_reader_thr = threading.Thread(target=telem_file_reader, daemon=True)
    file_reader_thr.start()

    misc_data_writer_thr = threading.Thread(target=misc_data_writer, daemon=True)
    misc_data_writer_thr.start()

    host = "0.0.0.0"
    port = 2702

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind((host, port))
    server.listen(5)

    try:
        while True:
            client_sock, addr = server.accept()
            socks.append((client_sock, addr))
    except KeyboardInterrupt:
        print("shutting down server")
    finally:
        server.close()

if __name__ == "__main__":
    main()
