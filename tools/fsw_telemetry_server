#!/usr/bin/env python3

import time
import shlex
import struct
import psutil
import socket
import threading
import subprocess

packet_struct = struct.Struct("<QQQ")
packet_size = packet_struct.size
socks = []
packets = []


def make_packet(timestamp, value, sensor_id):
    return packet_struct.pack(timestamp, value, sensor_id)


our_sensor_ids = {
    "core_clock": 1000,
    "core_temp": 1001,
    "throttled": 1100,
    "mem_usage": 1002,
    "core_usages": 1200,
}


def vcgencmd(cmd):
    try:
        cmd = ["vcgencmd"] + shlex.split(cmd)
        return subprocess.check_output(cmd).decode("utf-8").strip()
    except subprocess.CalledProcessError:
        return None


def get_clock():
    return int(vcgencmd("measure_clock arm").split("=")[1])


def get_temp():
    """
    returns core temp in millikelvin
    """
    temp = vcgencmd("measure_temp").split("=")[1][:-2]
    celsius = float(temp)
    kelvin = celsius + 273.15
    return int(kelvin * 1000)


THROTTLE_TABLE = [
    (0, "undervoltage"),
    (1, "freq_capped"),
    (2, "throttled"),
    (3, "temp_limit"),
    (16, "undervoltage_occurred"),
    (17, "freq_cap_occurred"),
    (18, "throttle_occurred"),
    (19, "soft_temp_limit"),
]


def get_throttled():
    throttled = int(vcgencmd("get_throttled").split("=")[1], 16)
    out = {}
    for bit, name in THROTTLE_TABLE:
        out[name] = bool(throttled & (1 << bit))

    return out


def get_mem_usage():
    """
    in millipercent (per cent mille, 1/1000 percent)
    0-1000000 (0-100%)
    """
    return int(psutil.virtual_memory().percent * 1000)


def get_core_usages():
    """
    array of millipercents
    """
    return list(map(lambda x: int(x * 1000), psutil.cpu_percent(percpu=True)))


def sleep_util(t):
    diff = t - time.time()
    if diff > 0:
        time.sleep(diff)


def misc_data_writer():
    global packets

    rate = 10  # hz
    dt = 1 / rate
    while True:
        start = time.time()

        clock = get_clock()
        temp = get_temp()
        throttled = get_throttled()
        mem_usage = get_mem_usage()
        core_usages = get_core_usages()

        packets.append(make_packet(start, clock, our_sensor_ids["core_clock"]))
        packets.append(make_packet(start, temp, our_sensor_ids["core_temp"]))
        for i, (k, v) in enumerate(throttled.items()):
            packets.append(make_packet(start, int(v), our_sensor_ids["throttled"] + i))

        packets.append(make_packet(start, mem_usage, our_sensor_ids["mem_usage"]))
        for i, usage in enumerate(core_usages):
            packets.append(make_packet(start, usage, our_sensor_ids["core_usages"] + i))

        sleep_util(start + dt)


def telem_file_reader():
    global socks, packets
    f = open("/var/lib/pspl_fsw/latest.bin", "rb")
    f.seek(0)
    backlog = b""

    while True:
        data = f.read(1024)
        if data:
            backlog += data

        while len(backlog) >= packet_size:
            packet = backlog[:packet_size]
            backlog = backlog[packet_size:]
            packets.append(packet)

        while len(packets) > 0:
            packet = packets.pop(0)
            sock: socket.socket = None
            for sock, addr in socks:
                try:
                    sock.sendall(packet)
                except Exception:
                    print(f"address {addr} disconnected")
                    sock.close()
                    socks.remove((sock, addr))


def main():
    file_reader_thr = threading.Thread(target=telem_file_reader, daemon=True)
    file_reader_thr.start()

    # misc_data_writer_thr = threading.Thread(target=misc_data_writer, daemon=True)
    # misc_data_writer_thr.start()

    host = "0.0.0.0"
    port = 25565

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind((host, port))
    server.listen(5)

    try:
        while True:
            client_sock, addr = server.accept()
            socks.append((client_sock, addr))
    except KeyboardInterrupt:
        print("shutting down server")
    finally:
        server.close()


if __name__ == "__main__":
    main()
